***********************
Functions and operators
***********************

Logical and comparison operators
================================

The usual logical operators are still available:

.. code-block:: sql

    boolean AND boolean -> boolean
    boolean OR boolean -> boolean
    NOT boolean -> boolean

SQL uses a three-valued logic system with ``true``, ``false``, and ``null``,
which represents *unknown*.

.. table:: Truth table

    +-----------+-----------+-------------+------------+-----------+
    | ``a``     | ``b``     | ``a AND b`` | ``a OR b`` | ``NOT a`` |
    +===========+===========+=============+============+===========+
    | ``TRUE``  | ``TRUE``  | ``TRUE``    | ``TRUE``   | ``FALSE`` |
    +-----------+-----------+-------------+------------+-----------+
    | ``TRUE``  | ``FALSE`` | ``FALSE``   | ``TRUE``   | ``FALSE`` |
    +-----------+-----------+-------------+------------+-----------+
    | ``TRUE``  | ``NULL``  | ``NULL``    | ``TRUE``   | ``FALSE`` |
    +-----------+-----------+-------------+------------+-----------+
    | ``FALSE`` | ``FALSE`` | ``FALSE``   | ``FALSE``  | ``TRUE``  |
    +-----------+-----------+-------------+------------+-----------+
    | ``FALSE`` | ``NULL``  | ``FALSE``   | ``NULL``   | ``TRUE``  |
    +-----------+-----------+-------------+------------+-----------+
    | ``NULL``  | ``NULL``  | ``NULL``    | ``NULL``   | ``NULL``  |
    +-----------+-----------+-------------+------------+-----------+

The operators ``AND`` and ``OR`` are commutative, that is, you can switch
the left and right operands without affecting the result. However, it is not
guaranteed that the left operand is evaluated before the right operand.

Comparison operators
--------------------

The usual comparison operators are available.

+-------------------------------------+--------------------------+
| Operator                            | Description              |
+=====================================+==========================+
| ``datatype < datatype -> boolean``  | Less than                |
+-------------------------------------+--------------------------+
| ``datatype > datatype -> boolean``  | Greater than             |
+-------------------------------------+--------------------------+
| ``datatype <= datatype -> boolean`` | Less than or equal to    |
+-------------------------------------+--------------------------+
| ``datatype >= datatype -> boolean`` | Greater than or equal to |
+-------------------------------------+--------------------------+
| ``datatype = datatype -> boolean``  | Equal                    |
+-------------------------------------+--------------------------+
| ``datatype <> datatype -> boolean`` | Not equal                |
+-------------------------------------+--------------------------+
| ``datatype != datatype -> boolean`` | Not equal                |
+-------------------------------------+--------------------------+

Mathematical functions and operators
====================================

Mathematical operators and provided for many PostgreSQL types.

+-----------------------------------------+-----------------------------------+
| Operation                               | Description                       |
+=========================================+===================================+
| ``numeric_type + numeric_type``         | Addition                          |
+-----------------------------------------+-----------------------------------+
| ``+ numeric_type``                      | Unary plus (no operation)         |
+-----------------------------------------+-----------------------------------+
| ``numeric_type - numeric_type``         | Subtraction                       |
+-----------------------------------------+-----------------------------------+
| ``- numeric_type``                      | Negation                          |
+-----------------------------------------+-----------------------------------+
| ``numeric_type * numeric_type``         | Multiplication                    |
+-----------------------------------------+-----------------------------------+
| ``numeric_type / numeric_type``         | Division (for integral types,     |
|                                         | division truncates the result     |
|                                         | towards zero)                     |
+-----------------------------------------+-----------------------------------+
| ``numeric_type % numeric_type``         | Modulo (remainder); available for |
|                                         | ``smallint``, ``integer``,        |
|                                         | ``bigint``, and ``numeric``       |
+-----------------------------------------+-----------------------------------+
| ``numeric ^ numeric``                   | Exponentiation                    |
| ``double precision ^ double precision`` |                                   |
+-----------------------------------------+-----------------------------------+
| ``|/ double precision``                 | Square root                       |
+-----------------------------------------+-----------------------------------+
| ``||/ double precision``                | Cube root                         |
+-----------------------------------------+-----------------------------------+
| ``@ numeric_type``                      | Absolute value                    |
+-----------------------------------------+-----------------------------------+
| ``integral_type & integral_type``       | Bitwise AND                       |
+-----------------------------------------+-----------------------------------+
| ``integral_type | integral_type``       | Bitwise OR                        |
+-----------------------------------------+-----------------------------------+
| ``integral_type # integral_type``       | Bitwise exclusive OR              |
+-----------------------------------------+-----------------------------------+
| ``~ integral_type``                     | Bitwise NOT                       |
+-----------------------------------------+-----------------------------------+
| ``integral_type << integer``            | Bitwise shift left                |
+-----------------------------------------+-----------------------------------+
| ``integral_type >> integer``            | Bitwise shift right               |
+-----------------------------------------+-----------------------------------+

String functions
================

*Strings* in this context include values of the types ``character``, ``text``
and ``character varying``.

.. todo: concat, pattern matching (like)

Date/Time functions and operators
=================================

.. todo: extract, date_part, date_trunc, current d/t, formatting d/t

Conditional expressions
=======================

.. todo: case, coalesce

Aggregate functions
===================

.. todo: sum, max, min, avg, count, + group by, + having
